## Resumo do que foi feito para resolver a issue #14942

### 1. Qual era o problema  
O Astropy tinha **três caminhos diferentes** para ordenar colunas de um `Table`:
1. **`Table.argsort()`** em `table.py`  
   - Chamava `self.as_array()` + `np.argsort`, reconstruindo objetos mixin (e.g. `Time`) linha a linha e quebrando o parâmetro `kind`.  
2. **Agrupamentos** em `groups.py`  
   - Usava `represent_mixins_as_columns(...)` + `as_array()` + `np.argsort(kind="stable")`, em vez de um método genérico.  
3. **Índices** em `index.py`  
   - Construía manualmente arrays de chave (incluindo special-cases para `Time`) e chamava `np.lexsort`, duplicando lógica.

Isso gerava comportamentos inconsistentes, alto overhead e duplicação de código.

---

### 2. Objetivo  
Unificar TODAS as ordenações de `Table` num **único pipeline** baseado em:
- `col.info.get_sortable_arrays()` (extrai sempre arrays NumPy puros, inclusive de mixins)  
- `np.lexsort(...)` (ordenação estável multichave)

---

### 3. Modificações em `table.py`  

#### 3.1. Novo helper `_get_sort_keys`  
```python
def _get_sort_keys(self, keys):
    """
    Constrói a lista de arrays NumPy para ordenar pelas colunas `keys`,
    usando info.get_sortable_arrays() para mixins.
    """
    if keys is None:
        return []
    if isinstance(keys, str):
        keys = [keys]
    sort_keys = []
    for key in keys:
        col = self[key]
        sort_keys.extend(col.info.get_sortable_arrays())
    return sort_keys

3.2. Substituição total de Table.argsort

-def argsort(self, keys=None, kind=None, reverse=False):
-    # … código antigo com as_array() e np.argsort …
-    arr = self.as_array(names=keys)
-    return arr.argsort(kind=kind)[::-1] if reverse else arr.argsort(kind=kind)
+def argsort(self, keys=None, kind=None, reverse=False):
+    """
+    Retorna índices que ordenam a tabela por `keys`,
+    extraindo sempre arrays NumPy e usando np.lexsort.
+    """
+    sort_keys = self._get_sort_keys(keys)
+    if not sort_keys:
+        idx = np.arange(len(self))
+    else:
+        # lexsort: último array é primário
+        idx = np.lexsort(sort_keys[::-1])
+    return idx[::-1] if reverse else idx

    Removemos todas as chamadas a as_array(), special-cases e o uso de kind.

    Mantivemos só reverse para inverter o resultado.

4. Modificações em groups.py
4.1. Refatoração de _table_group_by

-    if table_index is not None:
-        idx_sort = table_index.sorted_data()
-    else:
-        idx_sort = table_keys_sort.argsort(kind="stable")
+    if table_index is not None:
+        idx_sort = table_index.sorted_data()
+    else:
+        # usa o novo Table.argsort unificado
+        idx_sort = table.argsort(keys)

4.2. Refatoração de column_group_by

-    if isinstance(keys, Table):
-        keys_sort = represent_mixins_as_columns(keys)
-    else:
-        keys_sort = keys
-    idx_sort = keys_sort.argsort(kind="stable")
+    if isinstance(keys, Table):
+        idx_sort = keys.argsort()
+    else:
+        idx_sort = np.argsort(keys)

Essas mudanças fazem todo fluxo de agrupamento (group_by) usar o mesmo pipeline de ordenação.
5. Verificação em index.py

    O método sorted_data() já delega ao engine interno (SortedArray), que foi inicializado no __init__ com:

        coluna única → col.argsort(kind="stable")

        múltiplas colunas → np.lexsort(...)

    Não foi preciso mudar sorted_data(), pois ele continua chamando:

    return self.data.sorted_data()

    e o engine já contém o índice correto construído via Table.argsort ou np.lexsort.

6. Testes implementados

    test_argsort_and_sort

        Verifica t.argsort('time') == [1,0,2].

        Verifica que t.sort('time') ordena a tabela in-place.

    test_table_group_by_time

        Agrupa por Time repetido e confere chaves, índices e tamanhos de grupo.

    test_column_group_by_numeric

        Agrupa coluna NumPy e confere chaves, índices e tamanhos.

    test_table_index_sorted_data

        Adiciona índice em Table, recupera via t.indices[...] e confere que sorted_data() bate com t.argsort().

Todos os testes passaram sem erros, confirmando que TODOS os caminhos (argsort/sort, group_by, índices) usam o pipeline unificado de extração de chaves + np.lexsort.
